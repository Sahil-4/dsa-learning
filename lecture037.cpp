#include <iostream>
#include <vector>

using namespace std;

void getallsubsets(vector<int> &arr, vector<vector<int>> &ans, vector<int> subs, int i, int size) {
    if (i >= size) {
        // add temp subs into ans 
        ans.push_back(subs);
        return;
    }

    // not take exclude case 
    getallsubsets(arr, ans, subs, i+1, size);

    // take include case 
    subs.push_back(arr[i]);
    getallsubsets(arr, ans, subs, i+1, size);
}

void p1() {
    // Problem 1 : LC 78 Subsets - https://leetcode.com/problems/subsets/ 

    // Statement : Given an integer array nums of unique elements, 
    // return all possible subsets (the power set).
    // The solution set must not contain duplicate subsets. 
    // Return the solution in any order.
    // power set : set of all subsets 

    // Logic :
    // initialise a 2d array/vector ans 
    // and a temp array/vector subs to store a subset 
    // create a function getallsubsets() which will 
    // be a recursive function and recursively find all the subsets of arr (main array/vector)
    // and store them in ans array/vector 
    // getallsubsets() function will take main array arr, answer array ans 
    // subs starting index i ans size of arr 
    // inside getallsubsets() function add base condition 
    // if i == size_of_arr 
    // add subs into ans 
    // ans return 
    // increament i by 1 
    // call getallsubsets() function two times 
    // one time without doing any changes in variables (other then index)
    // and one time with including current or ith element of arr in subs     

    // Code :
    vector<int> arr{1,2,3};
    vector<vector<int>> ans;
    vector<int> subs;

    getallsubsets(arr, ans, subs, 0, arr.size());

    for (int i = 0; i < ans.size(); i++) {
        cout << "[ ";
        for (int j = 0; j < ans[i].size(); j++) {
            cout << ans[i][j] << " ";
        }
        cout << "]";
        cout << endl;
    }
}

void subsequencesofstr(string str, vector<string> &ans, string temp, int i) {
    if (i >= str.length()) {
        // add subseq in ans 
        // and return 
        if (temp.length() > 0) {
            ans.push_back(temp);
        }
        return;
    }

    // delete (dont include)
    subsequencesofstr(str, ans, temp, i+1);

    // not delete (include)
    temp.push_back(str[i]);
    subsequencesofstr(str, ans, temp, i+1);
}

void p2() {
    // Problem 2 : Subsequences of String - https://www.codingninjas.com/codestudio/problems/subsequences-of-string_985087

    // Statement : You are given a string 'STR' containing lowercase English letters from a to z inclusive. 
    // Your task is to find all non-empty possible subsequences of 'STR'.
    // A Subsequence of a string is the one which is generated by deleting 0 or more letters from the string 
    // and keeping the rest of the letters in the same order.

    // Logic :
    // create an array/vector ans to store all the subsequences of str 
    // create a function subsequencesofstr(), 
    // which will take a string, answer array, temp string and index i 
    // add base condition 
    // if i >= str.length() 
    // add temp string if temp is not empty 
    // then return 
    // after that increament i by 1 
    // call subsequencesofstr() function two times 
    // one time without adding ith char of str in temp 
    // and one time with adding ith char of str in temp 

    // Code :
    string str = "abc";
    vector<string> ans;

    subsequencesofstr(str, ans, "", 0);

    // all the subsequences 
    for (int i = 0; i < ans.size(); i++) {
        cout << "[ " << ans[i] << " ]" << endl;
    }
}

int main() {
    // Lecture 37 : Recursion Day 7 - Subset and Subsequences 

    // p1();

    // p2();

    return 0;
}